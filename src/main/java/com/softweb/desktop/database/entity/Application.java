package com.softweb.desktop.database.entity;

import com.softweb.desktop.auth.Authorization;
import javafx.scene.image.Image;
import lombok.*;

import javax.persistence.*;
import java.util.*;


/**
 * Entity class Application contains data of applications, what are saved in table "application".
 *
 * It has generated id, name, descriptions and additional information, such as
 * logo (path and image), license and application's statistics fields (views and downloads).
 *
 * Also Application class has field, which are referenced with other entity class
 * (developer and lists - application images, installers).
 *
 * @author Maksimchuk I.
 * @version 1.0
 */
@Getter
@Setter
@RequiredArgsConstructor
@Entity
@Table(name = "application")
@AllArgsConstructor
public class Application{

    /**
     * Autogenerated ID
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Name of application
     */
    @Column(name = "name")
    private String name;

    /**
     * Short description is a slug of application, which are used as title
     */
    @Column(name = "short_description")
    private String shortDescription;

    /**
     * Description of application that are visible on application page
     */
    @Column(name = "description")
    private String description;

    /**
     * Logo path contains URL of application logo image.
     */
    @Column(name = "logo_path")
    private String logoPath;

    /**
     * Transient field which is used to loads application logo image from URL
     *
     * @see this#logoPath
     */
    @Transient
    private Image logo;

    /**
     * Last Update has information, when application was updated.
     */
    @Column(name = "last_update")
    private Date lastUpdate;

    /**
     * Field-counter, which has information about application downloads
     */
    @Column(name = "downloads")
    private int downloads;

    /**
     * Field-counter, which has information about application views
     */
    @Column(name = "views")
    private int views;

    /**
     * License contains information about application license-type.
     */
    @ManyToOne
    @JoinColumn(name = "license")
    private License license;

    /**
     * Application's developer is a application's owner, which published application in system
     */
    @ManyToOne
    @JoinColumn(name = "developer_id")
    private Developer developer;

    /**
     * Application's images list which are used to shows application's UI
     */
    @OneToMany(mappedBy = "application", fetch = FetchType.EAGER)
    private Set<ApplicationImage> images;

    /**
     * Application's installer contains paths to installer and contains data about installer versions
     * and installation commands
     */
    @OneToMany(mappedBy = "application", fetch = FetchType.EAGER)
    private Set<Installer> installers;

    @Override
    public String toString() {
        return "Application{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", shortDescription='" + shortDescription + '\'' +
                ", description='" + description + '\'' +
                ", logoPath='" + logoPath + '\'' +
                ", lastUpdate=" + lastUpdate +
                ", downloads=" + downloads +
                ", views=" + views +
                ", license='" + license + '\'' +
                ", developer=" + developer +
                '}';
    }

    /**
     * Method fills applciation starter information, such as developer-owner, last update (now)
     * and initialize lists of installers and images
     */
    public void fillStarterInformation() {
        images = new HashSet<>();
        installers = new HashSet<>();
        lastUpdate = new Date();
        developer = Authorization.getCurrentUser();
    }

    /**
     * Method increases the counter of the number of downloads
     */
    public void download() {
        downloads += 1;
    }

    /**
     * Method increases the counter of the number of views
     */
    public void view() {
        views += 1;
    }
}
